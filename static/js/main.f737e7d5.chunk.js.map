{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","type","value","placeholder","onChange","change","Result","_props$weather","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","concat","App","state","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","then","response","ok","Error","json","data","console","log","time","toLocaleString","sys","Math","floor","main","speed","catch","components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAeeA,EAbF,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,MAAOL,EAAMK,MACbC,YAAY,eACZC,SAAUP,EAAMQ,WC2BTC,SAjCA,SAAAT,GAAS,IAAAU,EAUlBV,EAAMW,QARRC,EAFoBF,EAEpBE,KACAC,EAHoBH,EAGpBG,KACAC,EAJoBJ,EAIpBI,QACAC,EALoBL,EAKpBK,OACAC,EANoBN,EAMpBM,KACAC,EAPoBP,EAOpBO,SACAC,EARoBR,EAQpBQ,KACAC,EAToBT,EASpBS,IAEEC,EAAU,KACd,IAAKD,GAAON,EAAM,CAChB,IAAMQ,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAE3CH,EACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACoBF,EAAAC,EAAAC,cAAA,cAASU,IAE7BZ,EAAAC,EAAAC,cAAA,gCAAwBS,GACxBX,EAAAC,EAAAC,cAAA,mCAA2Ba,EAA3B,UACAf,EAAAC,EAAAC,cAAA,kDAA6BkB,GAC7BpB,EAAAC,EAAAC,cAAA,kDAA6BqB,GAC7BvB,EAAAC,EAAAC,cAAA,wCAA2Be,EAA3B,QACAjB,EAAAC,EAAAC,cAAA,qCAAwBc,EAAxB,SAIN,OAAOhB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,UAAUN,EAAG,QAAAO,OAAWb,EAAX,YAA4BO,KCuElDO,oNAhGbC,MAAQ,CACNvB,MAAO,GACPO,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,IAAK,MAEPU,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CACZ3B,MAAOyB,EAAEG,OAAO5B,2FAsCD6B,EAAWC,GAAW,IAAAC,EAAAC,KACvC,GAAgC,IAA5BA,KAAKT,MAAMvB,MAAMiC,QACjBH,EAAU9B,QAAUgC,KAAKT,MAAMvB,MAAO,CACxC,IAAMkC,EAAG,oDAAAb,OAAuDW,KAAKT,MAAMvB,MAAlE,cAAAqB,OAzDA,oCA0DTc,MAAMD,GACHE,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,YAEbH,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAK,GACJC,QAAQC,IAAIF,GACZ,IAAMG,GAAO,IAAI3B,MAAO4B,iBACxBd,EAAKJ,SAAS,CACZb,KAAK,EACLP,KAAMqC,EACNnC,QAASgC,EAAKK,IAAIrC,QAClBC,OAAQ+B,EAAKK,IAAIpC,OACjBC,KAAMoC,KAAKC,MAAMP,EAAKQ,KAAKtC,KAAO,IAAK,GACvCC,SAAU6B,EAAKQ,KAAKrC,SACpBC,KAAM4B,EAAK5B,KAAKqC,MAChB1C,KAAMuB,EAAKR,MAAMvB,UAGpBmD,MAAM,SAAArC,GACL4B,QAAQC,IAAI7B,GACZiB,EAAKJ,SAAS,CACZb,KAAK,EACLN,KAAMuB,EAAKR,MAAMvB,4CAMzB,OACEJ,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAACsD,EAAD,CAAMpD,MAAOgC,KAAKT,MAAMvB,MAAOG,OAAQ6B,KAAKR,oBAC3CQ,KAAKT,MAAMvB,MAAQJ,EAAAC,EAAAC,cAACuD,EAAD,CAAQ/C,QAAS0B,KAAKT,QAAY,aA3F5C+B,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.f737e7d5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        placeholder=\"Wpisz miasto\"\r\n        onChange={props.change}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\nconst Result = props => {\r\n  const {\r\n    date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    err\r\n  } = props.weather;\r\n  let content = null;\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n    content = (\r\n      <div>\r\n        <h3>\r\n          Pogoda dla miasta <strong>{city}</strong>\r\n        </h3>\r\n        <h4>Dane aktualne dla: {date}</h4>\r\n        <h4>Aktualna temperatura: {temp} &#186;C</h4>\r\n        <h4>Wschód słońca dzisiaj o {sunriseTime}</h4>\r\n        <h4>Zachód słońca dzisiaj o {sunsetTime}</h4>\r\n        <h4>Aktualna siła wiatru: {wind} m/s</h4>\r\n        <h4>Aktualne ciśnienie {pressure} hPa</h4>\r\n      </div>\r\n    );\r\n  }\r\n  return <div className=\"result\">{err ? `Brak ${city} w bazie` : content}</div>;\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Result from \"./Result\";\r\nimport \"./App.css\";\r\n\r\nconst APIKey = \"3790fa34d346ad2608be38eca56077b2\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    value: \"\",\r\n    date: \"\",\r\n    city: \"\",\r\n    sunrise: \"\",\r\n    sunset: \"\",\r\n    temp: \"\",\r\n    pressure: \"\",\r\n    wind: \"\",\r\n    err: \"\"\r\n  };\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  };\r\n  //   handleCitySubmit = e => {\r\n  //     console.log(\"dziala\");\r\n  //     e.preventDefault();\r\n\r\n  //     const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value},uk&APPID=${APIKey}`;\r\n  //     fetch(API)\r\n  //       .then(response => {\r\n  //         if (response.ok) {\r\n  //           return response;\r\n  //         }\r\n  //         throw Error(\"dupaaa\");\r\n  //       })\r\n  //       .then(response => response.json())\r\n  //       .then(data => {\r\n  //         console.log(data);\r\n  //         const time = new Date().toLocaleString();\r\n  //         this.setState({\r\n  //           err: false,\r\n  //           date: time,\r\n  //           sunrise: data.sys.sunrise,\r\n  //           sunset: data.sys.sunset,\r\n  //           temp: Math.floor(data.main.temp - 273, 2),\r\n  //           pressure: data.main.pressure,\r\n  //           wind: data.wind.speed,\r\n  //           city: this.state.value\r\n  //         });\r\n  //       })\r\n  //       .catch(err => {\r\n  //         console.log(err);\r\n  //         this.setState({\r\n  //           err: true,\r\n  //           city: this.state.value\r\n  //         });\r\n  //       });\r\n  //   };\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.value.length === 0) return;\r\n    if (prevState.value !== this.state.value) {\r\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value},uk&APPID=${APIKey}`;\r\n      fetch(API)\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response;\r\n          }\r\n          throw Error(\"dupaaa\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          console.log(data);\r\n          const time = new Date().toLocaleString();\r\n          this.setState({\r\n            err: false,\r\n            date: time,\r\n            sunrise: data.sys.sunrise,\r\n            sunset: data.sys.sunset,\r\n            temp: Math.floor(data.main.temp - 273, 2),\r\n            pressure: data.main.pressure,\r\n            wind: data.wind.speed,\r\n            city: this.state.value\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          this.setState({\r\n            err: true,\r\n            city: this.state.value\r\n          });\r\n        });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form value={this.state.value} change={this.handleInputChange} />\r\n        {this.state.value ? <Result weather={this.state} /> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}